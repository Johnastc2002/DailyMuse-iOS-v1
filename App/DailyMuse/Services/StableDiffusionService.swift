//
//  StableDiffusionService.swift
//  DailyMuse
//
//  Created by tough on 16/5/2025.
//

import CoreML
import UIKit
import Foundation
import StableDiffusion
import os.log

// MARK: - Logger
private let logger = Logger(
    subsystem: Bundle.main.bundleIdentifier ?? "com.dailymuse",
    category: "StableDiffusion"
)

// MARK: - Service
@Observable final class StableDiffusionService {
    // MARK: - Properties
    
    /// How to add folder in bundle: https://stackoverflow.com/a/79096098
    let resourceURL = "sd_models/coreml-stable-diffusion-v1-5-palettized_original"
    
    var pipeline: StableDiffusionPipeline!
    
    // MARK: - Initialization
    init() {
        
    }
    
    func initalize() throws {
        logger.debug("Starting StableDiffusionService initialization...")
        
        // Configure MLModel with memory-efficient settings
        let config = MLModelConfiguration()
//        config.computeUnits = .cpuAndGPU // Use CPU only to reduce memory usage
        config.allowLowPrecisionAccumulationOnGPU = true // Enable low precision to save memory
        logger.debug("Using compute units: \(String(describing: config.computeUnits))")
        
        // Load essential model components first
        do {
            logger.debug("Looking for model resources...")
            guard let modelURL = Bundle.main.url(forResource: resourceURL, withExtension: nil) else {
                logger.error("Model folder not found at path: \(self.resourceURL)")
                fatalError("Model folder not found")
            }
            logger.debug("Found model at path: \(modelURL.path)")
            
            logger.debug("Initializing StableDiffusionPipeline...")
            let pipeline = try StableDiffusionPipeline(resourcesAt: modelURL, controlNet: [], configuration: config, reduceMemory: true)
            self.pipeline = pipeline
            try self.pipeline.loadResources()
            logger.debug("StableDiffusionPipeline initialized successfully")

        } catch {
            logger.error("Failed to load model components: \(error.localizedDescription)")
            if let mlError = error as? MLModelError {
                logger.error("ML Error code: \(mlError.code.rawValue)")
                logger.error("ML Error description: \(mlError.localizedDescription)")
            }
            throw StableDiffusionError.modelLoadFailed
        }
    }
    
    func generateImage(from prompt: String) async throws -> UIImage {
        logger.debug("Starting image generation with prompt: \(prompt)")
        
        var config = PipelineConfiguration(prompt: prompt)
        config.originalSize = 512
        config.targetSize = 512
        config.stepCount = 20
        config.guidanceScale = 7
        config.seed = UInt32.random(in: 0...UInt32.max)
        config.negativePrompt = "people, human, man, woman, frame, watermark, text, logo, word, blurry, lowres, bad anatomy, bad hands, missing fingers, extra limbs, jpeg artifacts, over saturation, vibrant, neon, overexposed, high contrast, unnatural color, harsh lighting"
//        config.disableSafety = true
        logger.debug("Pipeline configuration set - Size: 512x512")
        
        do {
            logger.debug("Generating images with pipeline...")
            let generatedImages = try pipeline.generateImages(configuration: config) { progress in
                
                logger.debug("step: \(progress.step), total: \(progress.stepCount)")

                return true
            }
            logger.debug("Pipeline generated \(generatedImages.count) images")
            
            guard let first = generatedImages.first else {
                logger.error("No images were generated by the pipeline")
                throw StableDiffusionError.generationFailed
            }
            
            guard let img = first else {
                logger.error("First generated image is nil")
                throw StableDiffusionError.generationFailed
            }
            
            logger.debug("Successfully generated image with dimensions: \(img.width)x\(img.height)")
            return UIImage(cgImage: img)
        } catch {
            logger.error("Image generation failed with error: \(error.localizedDescription)")
            if let mlError = error as? MLModelError {
                logger.error("ML Error code: \(mlError.code.rawValue)")
                logger.error("ML Error description: \(mlError.localizedDescription)")
            }
            throw error
        }
    }
} 
